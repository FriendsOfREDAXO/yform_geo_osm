name: Download Latest Leaflet
on:
  workflow_dispatch: # Ermöglicht manuelle Auslösung des Workflows
jobs:
  download_leaflet:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Get Latest Leaflet Version
        id: get_version
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/Leaflet/Leaflet/releases/latest | jq -r .tag_name)
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "Detected latest version: $LATEST_VERSION"
      
      - name: Download Leaflet
        run: |
          LATEST_VERSION="${{ steps.get_version.outputs.version }}"
          echo "Downloading Leaflet version $LATEST_VERSION..."
          mkdir -p /tmp/leaflet-download
          curl -L "https://github.com/Leaflet/Leaflet/releases/latest/download/leaflet.zip" -o /tmp/leaflet-download/leaflet.zip
          unzip -o /tmp/leaflet-download/leaflet.zip -d /tmp/leaflet-download
          
          # Überprüfen, ob die Dateien entpackt wurden
          ls -la /tmp/leaflet-download
      
      - name: Prepare Directory
        run: |
          # Sicherstellen, dass der assets-Ordner existiert
          mkdir -p assets
          
          # Alten Leaflet-Ordner speichern zum Vergleich (falls vorhanden)
          if [ -d "assets/leaflet" ]; then
            echo "Backing up old leaflet directory for comparison..."
            cp -r assets/leaflet /tmp/old-leaflet
            rm -rf assets/leaflet
          fi
          
          # Überprüfen, ob der dist-Ordner existiert
          if [ ! -d "/tmp/leaflet-download/dist" ]; then
            echo "Error: dist directory not found after extracting leaflet.zip"
            find /tmp/leaflet-download -type d -ls
            exit 1
          fi
          
          # Leaflet-Dateien kopieren
          cp -r /tmp/leaflet-download/dist assets/leaflet
          echo "New leaflet files copied to assets/leaflet"
          ls -la assets/leaflet
      
      - name: Check for Changes
        id: check_changes
        run: |
          git status
          
          # Prüfen, ob Änderungen vorhanden sind
          if git diff --quiet assets/leaflet; then
            echo "No changes detected in Leaflet files"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in Leaflet files"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Neuen Branch erstellen
            BRANCH_NAME="update-leaflet-$(date +%Y%m%d-%H%M%S)"
            git checkout -b $BRANCH_NAME
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          fi
      
      - name: Commit and Create PR
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add assets/leaflet
          git commit -m "Update Leaflet to ${{ steps.get_version.outputs.version }}"
          git push origin ${{ env.BRANCH_NAME }}
      
      - name: Create Pull Request
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Update Leaflet to ${{ steps.get_version.outputs.version }}"
          body: |
            Automatisches Update von Leaflet auf Version ${{ steps.get_version.outputs.version }}
            
            Diese PR wurde automatisch durch den 'Download Latest Leaflet' Workflow erstellt.
          branch: ${{ env.BRANCH_NAME }}
          base: ${{ github.ref_name }}
      
      - name: No Changes Report
        if: steps.check_changes.outputs.has_changes == 'false'
        run: |
          echo "No changes detected. Leaflet is already at the latest version (${{ steps.get_version.outputs.version }})."
